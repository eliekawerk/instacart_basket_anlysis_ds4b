plot_grid(p_title, p1, p2, ncol = 1, rel_heights = c(0.1, 1, 1))
train_recLab <- getData(eval_scheme, "train")
test_recLab  <- getData(eval_scheme, "known")
fit_ubcf_recLab <- Recommender(train_recLab,
method = "UBCF",
param = list(method = "Cosine", nn = 150))
train_recLab <- getData(eval_scheme, "train")
test_recLab  <- getData(eval_scheme, "known")
fit_ubcf_recLab <- Recommender(train_recLab,
method = "UBCF",
param = list(method = "Cosine", nn = 150))
pred_ubcf_recLab <- predict(fit_ubcf_recLab, test_recLab, n = 5)
extract_predictions <- function(predictions, n) {
predictions@itemLabels[predictions@items[[n]]]
}
pred_ubcf_recLab %>%
extract_predictions(1)
test_recLab
test_recLab
test_recLab@data
test_recLab@data[[1]]
test_recLab@data@itemInfo
test_recLab@data@itemsetInfo
test_recLab@data@data
test_recLab@data@data[,1]
test_recLab@data@data@i
test_recLab@data@data@p
test_recLab@data@data@Dim
test_recLab@data@data@Dimnames
test_recLab@data@data@factors
test_recLab@data@data@i
test_recLab@data@data@p
test_recLab  <- getData(eval_scheme, "unknown")
test_recLab
pred_ubcf_recLab <- predict(fit_ubcf_recLab, test_recLab, n = 5)
pred_ubcf_recLab %>%
extract_predictions(1)
pred_ubcf_recLab %>%
extract_predictions(2)
knitr::opts_chunk$set(
eval       = TRUE,
warning    = FALSE,
message    = FALSE,
fig.height = 8,
fig.width  = 8
)
library(recommenderlab)
library(tidyverse)
library(tidyquant)
library(fs)
library(knitr)
library(glue)
library(cowplot)
# Warning: This is a long-running script, which may take 30 seconds or so to load
source("../00_Scripts/read_directory.R")
instacart_raw_list <- read_directory_to_list("../00_Data")
instacart_raw_list %>% names()
market_basket_tbl <- instacart_raw_list$order_products__prior %>%
inner_join(instacart_raw_list$products, by = "product_id")
market_basket_tbl %>%
select(order_id, product_name)
item_frequency_tbl <- market_basket_tbl %>%
count(product_name) %>%
arrange(desc(n)) %>%
mutate(
pct = n / sum(n),
cumulative_pct = cumsum(pct),
popular_product = ifelse(cumulative_pct <= 0.5, "Yes", "No")
)
item_frequency_tbl
item_frequency_tbl %>%
rowid_to_column() %>%
ggplot(aes(rowid, n)) +
geom_point(aes(size = n, color = popular_product), alpha = 0.2) +
theme_tq() +
scale_color_tq() +
theme(legend.direction = "vertical") +
labs(title = "Item Frequency",
subtitle = "Top Items Account For Majority Of Purchases")
knitr::opts_chunk$set(
eval       = TRUE,
warning    = FALSE,
message    = FALSE,
fig.height = 6,
fig.width  = 6
)
item_frequency_tbl %>%
rowid_to_column() %>%
ggplot(aes(rowid, n)) +
geom_point(aes(size = n, color = popular_product), alpha = 0.2) +
theme_tq() +
scale_color_tq() +
theme(legend.direction = "vertical") +
labs(title = "Item Frequency",
subtitle = "Top Items Account For Majority Of Purchases")
item_frequency_tbl %>%
rowid_to_column() %>%
ggplot(aes(rowid, n)) +
geom_point(aes(size = n, color = popular_product), alpha = 0.2) +
theme_tq() +
scale_color_tq() +
theme(legend.direction = "vertical",
legend.position  = "right") +
labs(title = "Item Frequency",
subtitle = "Top Items Account For Majority Of Purchases")
item_frequency_tbl %>%
rowid_to_column() %>%
ggplot(aes(rowid, n)) +
geom_point(aes(size = n, color = popular_product), alpha = 0.2) +
theme_tq() +
scale_color_tq() +
theme(legend.direction = "vertical",
legend.position  = "right") +
labs(title = "Item Frequency",
subtitle = "Top Items Account For Majority Of Purchases")
item_frequency_tbl %>%
rowid_to_column() %>%
ggplot(aes(rowid, n)) +
geom_point(aes(size = n, color = popular_product), alpha = 0.2) +
theme_tq() +
scale_color_tq() +
theme(legend.direction = "vertical",
legend.position  = "right") +
labs(title = "Item Frequency",
subtitle = "Top Items Account For Majority Of Purchases")
item_frequency_tbl %>%
count(popular_product) %>%
mutate(pct = nn / sum(nn))
# Get names of top products
top_products_vec <- item_frequency_tbl %>%
filter(popular_product == "Yes") %>%
pull(product_name)
# Use names to filter
top_products_basket_tbl <- market_basket_tbl %>%
filter(product_name %in% top_products_vec) %>%
select(order_id, product_name)
top_products_basket_tbl
n_sample  <- 20000
min_items <- 3
set.seed(100)
sample_order_ids <- sample(unique(top_products_basket_tbl$order_id), size = n_sample)
top_products_sample_tbl <- top_products_basket_tbl %>%
# Sample orders
filter(order_id %in% sample_order_ids) %>%
# Filter using min_items
group_by(order_id) %>%
filter(n() >= min_items) %>%
ungroup()
top_products_sample_tbl
n_sample  <- 20000
min_items <- 3
set.seed(100)
sample_order_ids <- sample(unique(top_products_basket_tbl$order_id), size = n_sample)
top_products_sample_tbl <- top_products_basket_tbl %>%
# Sample orders
filter(order_id %in% sample_order_ids) %>%
# Filter using min_items
group_by(order_id) %>%
filter(n() >= min_items) %>%
ungroup()
top_products_sample_tbl
ratings_matrix_rlab <- top_products_sample_tbl %>%
# Spread into user-item format
mutate(value = 1) %>%
spread(product_name, value, fill = 0) %>%
# Convert to matrix
select(-order_id) %>%
as.matrix() %>%
# Convert to binaryRatingsMatrix class used by recommenderlab
as("binaryRatingMatrix")
ratings_matrix_rlab
recommenderRegistry$get_entries(dataType = "binaryRatingMatrix")
eval_scheme <- ratings_matrix_rlab %>%
evaluationScheme(method = "split", train = 0.9, k = NULL, given = -1)
eval_scheme
?evaluationScheme
eval_scheme <- ratings_matrix_rlab %>%
evaluationScheme(method = "split", train = 0.9, k = NULL, given = -1)
eval_scheme
algorithms_list <- list(
"random items"      = list(name  = "RANDOM",
param = NULL),
"popular items"     = list(name  = "POPULAR",
param = NULL),
"user-based CF"     = list(name  = "UBCF",
param = list(method = "Cosine", nn = 500)),
"item-based CF"     = list(name  = "IBCF",
param = list(k = 5)),
"association rules" = list(name  = "AR",
param = list(supp = 0.01, conf = 0.01))
)
# Warning: This will take a minute or so to run
results_rlab <- evaluate(eval_scheme, algorithms_list, type = "topNList", n = 1:10)
algorithms_list <- list(
"random items"      = list(name  = "RANDOM",
param = NULL),
"popular items"     = list(name  = "POPULAR",
param = NULL),
"user-based CF"     = list(name  = "UBCF",
param = list(method = "Cosine", nn = 500)),
"item-based CF"     = list(name  = "IBCF",
param = list(k = 5)),
"association rules" = list(name  = "AR",
param = list(supp = 0.01, conf = 0.01))
)
# Warning: This will take a minute or so to run
results_rlab <- evaluate(eval_scheme, algorithms_list, type = "topNList", n = 1:10)
?evaluate
# Warning: This will take a minute or so to run
results_rlab <- recommenderlab::evaluate(eval_scheme, algorithms_list, type = "topNList", n = 1:10)
par(mfrow = c(2, 1))
plot(results_rlab, legend = "topleft")
title("ROC Curve")
plot(results_rlab, "prec/rec", legend = "topright")
title("Precison vs Recall Plot")
results_rlab
results_rlab$`random items`
results_rlab$`random items` %>% getConfusionMatrix()
results_rlab$`random items` %>%
getConfusionMatrix() %>%
as.tibble()
results_rlab$`random items` %>%
getConfusionMatrix()
results_rlab %>%
getConfusionMatrix()
results_rlab %>%
map(getConfusionMatrix() )
results_rlab %>%
map(getConfusionMatrix)
results_rlab$`random items` %>%
map(getConfusionMatrix)
results_rlab$`random items` %>%
getConfusionMatrix()
results_rlab$`random items` %>%
getConfusionMatrix() %>%
pluck()
results_rlab$`random items` %>%
getConfusionMatrix() %>%
pluck(1)
?pluck
results_rlab$`random items` %>%
getConfusionMatrix() %>%
pluck(1) %>%
as.tibble() %>%
rownames_to_column(var = "n")
results_rlab
results_rlab %>%
map(tidy_confusion_matrix)
tidy_confusion_matrix <- function(rlab_result) {
rlab_result %>%
getConfusionMatrix() %>%
pluck(1) %>%
as.tibble() %>%
rownames_to_column(var = "n")
}
results_rlab %>%
map(tidy_confusion_matrix)
results_rlab %>%
map(tidy_confusion_matrix) %>%
names()
?enframe
results_rlab %>%
map(tidy_confusion_matrix) %>%
enframe(name = ~names(.))
results_rlab %>%
map(tidy_confusion_matrix) %>%
enframe()
results_tbl <- results_rlab %>%
map(tidy_confusion_matrix) %>%
enframe() %>%
unnest()
results_tbl
results_rlab %>%
pluck(1)
results_rlab %>%
pluck(1) %>%
getConfusionMatrix()
results_tbl %>%
ggplot(aes(FPR, TPR, color = name)) +
geom_line() +
geom_point() +
geom_label(aes(label = n))
results_tbl %>%
ggplot(aes(FPR, TPR, color = name)) +
geom_line() +
geom_point() +
geom_label(aes(label = n)) +
theme_tq() +
scale_color_tq()
results_tbl %>%
ggplot(aes(FPR, TPR, color = name)) +
geom_line() +
geom_point() +
geom_label(aes(label = n)) +
theme_tq() +
scale_color_tq() +
theme(legend.position  = "right",
legend.direction = "vertical")
results_tbl %>%
ggplot(aes(FPR, TPR, color = name)) +
geom_line() +
geom_point() +
geom_label(aes(label = n)) +
theme_tq() +
scale_color_tq() +
theme(legend.position  = "right",
legend.direction = "vertical")
results_tbl %>%
ggplot(aes(FPR, TPR, color = fct_reorder2(name, FPR, as.numeric(n)))) +
geom_line() +
geom_label(aes(label = n)) +
theme_tq() +
scale_color_tq() +
theme(legend.position  = "right",
legend.direction = "vertical")
?fct_reorder2
results_tbl %>%
ggplot(aes(FPR, TPR,
color = fct_reorder2(as.factor(name), FPR, as.numeric(n)))) +
geom_line() +
geom_label(aes(label = n)) +
theme_tq() +
scale_color_tq() +
theme(legend.position  = "right",
legend.direction = "vertical")
results_tbl %>%
ggplot(aes(FPR, TPR,
color = fct_reorder2(as.factor(name), FPR, as.numeric(n)))) +
geom_line() +
geom_label(aes(label = n)) +
theme_tq() +
scale_color_tq() +
theme(legend.position  = "right",
legend.direction = "vertical") +
labs(
color = "Model Type"
)
results_tbl %>%
ggplot(aes(FPR, TPR,
color = fct_reorder2(as.factor(name), FPR, TPR))) +
geom_line() +
geom_label(aes(label = n)) +
theme_tq() +
scale_color_tq() +
theme(legend.position  = "right",
legend.direction = "vertical") +
labs(
color = "Model Type"
)
results_tbl %>%
ggplot(aes(FPR, TPR,
color = fct_reorder2(as.factor(name), FPR, TPR))) +
geom_line() +
geom_label(aes(label = n)) +
theme_tq() +
scale_color_tq() +
theme(legend.position  = "right",
legend.direction = "vertical") +
labs(
title = "ROC Plot",
subtitle = "Best Model: User-Based Collaborative Filtering"
color = "Model Type"
results_tbl %>%
ggplot(aes(FPR, TPR,
color = fct_reorder2(as.factor(name), FPR, TPR))) +
geom_line() +
geom_label(aes(label = n)) +
theme_tq() +
scale_color_tq() +
theme(legend.position  = "right",
legend.direction = "vertical") +
labs(
title = "ROC Plot",
subtitle = "Best Model: User-Based Collaborative Filtering",
color = "Model Type"
)
results_tbl %>%
ggplot(aes(recall, precision,
color = fct_reorder2(as.factor(name), recall, precision))) +
geom_line() +
geom_label(aes(label = n)) +
theme_tq() +
scale_color_tq() +
theme(legend.position  = "right",
legend.direction = "vertical") +
labs(
title = "Precision Vs Recall Plot",
subtitle = "Best Model: User-Based Collaborative Filtering",
color = "Model Type"
)
results_tbl %>%
ggplot(aes(recall, precision,
color = fct_reorder(as.factor(name), mean(precision / recall)))) +
geom_line() +
geom_label(aes(label = n)) +
theme_tq() +
scale_color_tq() +
theme(legend.position  = "right",
legend.direction = "vertical") +
labs(
title = "Precision Vs Recall Plot",
subtitle = "Best Model: User-Based Collaborative Filtering",
color = "Model Type"
)
results_tbl %>%
ggplot(aes(recall, precision,
color = fct_reorder(as.factor(name), precision / recall))) +
geom_line() +
geom_label(aes(label = n)) +
theme_tq() +
scale_color_tq() +
theme(legend.position  = "right",
legend.direction = "vertical") +
labs(
title = "Precision Vs Recall Plot",
subtitle = "Best Model: User-Based Collaborative Filtering",
color = "Model Type"
)
results_tbl %>%
ggplot(aes(recall, precision,
color = fct_reorder(as.factor(name), max(precision)))) +
geom_line() +
geom_label(aes(label = n)) +
theme_tq() +
scale_color_tq() +
theme(legend.position  = "right",
legend.direction = "vertical") +
labs(
title = "Precision Vs Recall Plot",
subtitle = "Best Model: User-Based Collaborative Filtering",
color = "Model Type"
)
results_tbl %>%
ggplot(aes(recall, precision,
color = fct_reorder2(as.factor(name), precision, recall))) +
geom_line() +
geom_label(aes(label = n)) +
theme_tq() +
scale_color_tq() +
theme(legend.position  = "right",
legend.direction = "vertical") +
labs(
title = "Precision Vs Recall Plot",
subtitle = "Best Model: User-Based Collaborative Filtering",
color = "Model Type"
)
results_tbl %>%
ggplot(aes(recall, precision,
color = fct_reorder2(as.factor(name), recall, rev(precision)))) +
geom_line() +
geom_label(aes(label = n)) +
theme_tq() +
scale_color_tq() +
theme(legend.position  = "right",
legend.direction = "vertical") +
labs(
title = "Precision Vs Recall Plot",
subtitle = "Best Model: User-Based Collaborative Filtering",
color = "Model Type"
)
results_tbl %>%
ggplot(aes(recall, precision,
color = fct_reorder2(as.factor(name), recall, precision))) +
geom_line() +
geom_label(aes(label = n)) +
theme_tq() +
scale_color_tq() +
theme(legend.position  = "right",
legend.direction = "vertical") +
labs(
title = "Precision Vs Recall Plot",
subtitle = "Best Model: User-Based Collaborative Filtering",
color = "Model Type"
)
results_tbl %>%
mutate(
f1 = 2*(precision * recall) / (precision + recall)
)
ggplot(aes(recall, precision,
color = fct_reorder2(as.factor(name), recall, f1))) +
geom_line() +
geom_label(aes(label = n)) +
theme_tq() +
scale_color_tq() +
theme(legend.position  = "right",
legend.direction = "vertical") +
labs(
title = "Precision Vs Recall Plot",
subtitle = "Best Model: User-Based Collaborative Filtering",
color = "Model Type"
)
results_tbl %>%
mutate(
f1 = 2*(precision * recall) / (precision + recall)
) %>%
ggplot(aes(recall, precision,
color = fct_reorder2(as.factor(name), recall, f1))) +
geom_line() +
geom_label(aes(label = n)) +
theme_tq() +
scale_color_tq() +
theme(legend.position  = "right",
legend.direction = "vertical") +
labs(
title = "Precision Vs Recall Plot",
subtitle = "Best Model: User-Based Collaborative Filtering",
color = "Model Type"
)
results_tbl %>%
mutate(
f1 = 2*(precision * recall) / (precision + recall)
)
